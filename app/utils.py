# 2025-07-24 18:30:00
import logging
from datetime import datetime, timedelta, time
from decimal import Decimal
from aiogram import Bot
from config import MAIN_GROUP_ID, CURRENCY_SYMBOL # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç CURRENCY_SYMBOL
from app.database import db

logger = logging.getLogger(__name__)

def format_amount(amount: Decimal) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –∏ –∏–∑–±–µ–≥–∞—è –Ω–∞—É—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏.

    Args:
        amount (Decimal): –°—É–º–º–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞.
    """
    if amount is None:
        return "0"
    
    s = f'{amount:f}'
    
    if '.' in s:
        s = s.rstrip('0').rstrip('.')
        
    return s

def format_transactions_history(transactions: list, user_db_id: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

    Args:
        transactions (list): –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–æ–±—ä–µ–∫—Ç—ã sqlite3.Row).
        user_db_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç—Å—è –æ—Ç—á–µ—Ç.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏.
    """
    response_parts = []
    top_ups, incoming, outgoing, system_debits = [], [], [], []

    for tx in transactions:
        if tx['to_user_id'] == user_db_id:
            if tx['type'] in ('manual_add', 'welcome_bonus', 'top_up'):
                top_ups.append(tx)
            elif tx['type'] in ('transfer', 'fund_payment'):
                incoming.append(tx)
        elif tx['from_user_id'] == user_db_id:
            if tx['type'] in ('transfer', 'event_fee'):
                outgoing.append(tx)
            elif tx['type'] in ('demurrage', 'manual_rem'):
                system_debits.append(tx)

    def format_tx_line(tx, sign, prefix="", peer_name=""):
        date_str = tx['created_at'].strftime('%d.%m %H:%M')
        amount_str = format_amount(Decimal(str(tx['amount'])))
        comment = f" ({tx['comment']})" if tx['comment'] else ""
        return f"  {sign} {amount_str} {prefix}{peer_name}{comment} - {date_str}\n"

    if top_ups:
        response_parts.append("\n\nüí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n")
        for tx in top_ups:
            response_parts.append(format_tx_line(tx, "‚úÖ +"))
    
    if incoming:
        response_parts.append("\nüì• <b>–í—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã:</b>\n")
        for tx in incoming:
            peer = f"@{tx['sender_username']}" if tx['sender_username'] else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            response_parts.append(format_tx_line(tx, "‚ûï", prefix="–æ—Ç ", peer_name=peer))

    if outgoing:
        response_parts.append("\nüì§ <b>–ò—Å—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø–ª–∞—Ç–µ–∂–∏:</b>\n")
        for tx in outgoing:
            peer = f"@{tx['recipient_username']}" if tx['recipient_username'] != 'fund' else "–§–æ–Ω–¥"
            response_parts.append(format_tx_line(tx, "‚ûñ -", peer_name=peer))

    if system_debits:
        response_parts.append("\nüí∏ <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ø–∏—Å–∞–Ω–∏—è:</b>\n")
        for tx in system_debits:
            peer = "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ" if tx['type'] == 'manual_rem' else "–î–µ–º–µ—Ä—Ä–µ–¥–∂"
            response_parts.append(format_tx_line(tx, "‚ûñ -", peer_name=peer))
            
    return "".join(response_parts)

async def get_user_balance(telegram_id: int) -> Decimal:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = db.get_user(telegram_id=telegram_id)
    return Decimal(str(user['balance'])) if user else Decimal('0')

async def get_transaction_count(telegram_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = db.get_user(telegram_id=telegram_id)
    return user['transaction_count'] if user else 0

async def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    user = db.get_user(telegram_id=telegram_id)
    return bool(user['is_admin']) if user else False

async def is_user_in_group(bot: Bot, telegram_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    """
    if telegram_id == 0:
        return True
        
    try:
        member = await bot.get_chat_member(MAIN_GROUP_ID, telegram_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.warning(f"Could not check user {telegram_id} in group {MAIN_GROUP_ID}: {e}")
        return False

async def ensure_user_exists(telegram_id: int, username: str | None, is_bot: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç username, –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–∏–ª—Å—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è.
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤.
    """
    if is_bot:
        logger.info(f"Ignored attempt to register a bot with id {telegram_id}")
        return False

    user = db.get_user(telegram_id=telegram_id)
    
    if not user:
        db.create_user(telegram_id, username)
        logger.info(f"New user created: {username or telegram_id}")
        return True
    
    if username and (not user['username'] or user['username'] != username.lower()):
        db.update_user_username(telegram_id, username)
        logger.info(f"Username for user {telegram_id} updated to {username.lower()}")

    return False

def get_next_run_time(
    event_type: str, 
    event_date: datetime | None, 
    weekday: int | None, 
    event_time: time | None,
    last_run: datetime | None = None
) -> datetime | None:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    now = datetime.now()
    base_time = last_run or now

    if event_type == 'single':
        if event_date and event_date > now:
            return event_date
        return None

    if event_type == 'recurring' and weekday is not None and event_time is not None:
        search_date = base_time.date()
        
        days_ahead = weekday - search_date.weekday()
        if days_ahead < 0:
            days_ahead += 7
        
        next_date = search_date + timedelta(days=days_ahead)
        next_datetime = datetime.combine(next_date, event_time)
        
        if next_datetime < now:
            next_datetime += timedelta(days=7)
            
        return next_datetime

    return None
