# split_ai_code.py
# v. 2.3.0
# 2025-07-29T19:45:22.000Z
#!/usr/bin/env python3
"""
–î–≤—É—Ö—Ä–µ–∂–∏–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–¥–æ–º –ø—Ä–æ–µ–∫—Ç–∞.

–†–µ–∂–∏–º 1: –†–∞–∑–±–æ—Ä (split)
–†–∞–∑–±–∏–≤–∞–µ—Ç ¬´—Å—ã—Ä–æ–π¬ª –≤—ã–≤–æ–¥ –ò–ò –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞.
–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
–ó–∞–ø—É—Å–∫: python split_ai_code.py <—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞_AI.txt>

–†–µ–∂–∏–º 2: –°–±–æ—Ä–∫–∞ (gather)
–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –º–∞—Å–∫–∞–º) –≤ –æ–¥–∏–Ω .txt —Ñ–∞–π–ª.
–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: <–∏–º—è_–ø–∞–ø–∫–∏_–ø—Ä–æ–µ–∫—Ç–∞>_code.txt.
–ò—Å–∫–ª—é—á–∞–µ—Ç —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏.
–ó–∞–ø—É—Å–∫: python split_ai_code.py gather

--- –ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
v. 2.3.0: –ò–∑–º–µ–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∂—É—Ä–Ω–∞–ª–∞ (Project_journal.md, project_history.md). –¢–µ–ø–µ—Ä—å –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ.
v. 2.2.0: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–æ—á–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ª–æ–≥–æ–≤. –¢–µ–ø–µ—Ä—å –≤ —Å–±–æ—Ä–∫—É –ø–æ–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ª–æ–≥-—Ñ–∞–π–ª –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –∏–º–µ–Ω–∏).
v. 2.1.0: –ù–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ–∞–π–ª–∞.
"""

import re
import sys
import shutil
from pathlib import Path
from typing import Tuple, Set, List, Dict

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ë–û–†–ö–ò (GATHER) ---
# template: ["*.py", "*.log", "*.yaml", "*.toml", "*.txt", "project_history.md"]
# ["*.py", "*.log", "*.yaml", "*.toml", "project_history.md"]

GATHER_FILE_PATTERNS: List[str] = ["*.py",  "*.txt", "*.yaml", "*.toml", "*.log", "project_history.md"]
EXCLUDED_GATHER_DIRS: Set[str] = {"temp", "doc", "update", ".github", ".venv", "__pycache__", ".pytest_cache" ".git"}
GATHER_SORT_ORDER: Dict[str, int] = {".py": 1, ".env": 2, ".yaml": 3, ".toml": 4, ".gitignore": 5, ".txt":7, "*.md": 8,  ".log": 10}

# --- –û–ë–©–ò–ï –†–ï–ì–£–õ–Ø–†–ù–´–ï –í–´–†–ê–ñ–ï–ù–ò–Ø ---
CODE_BLOCK_RE = re.compile(r"```(\w+)?\n(.*?)```", re.S)
PATH_LINE_RE = re.compile(r"#\s*([^\n\r]+)")
PATH_CANDIDATE_RE = re.compile(r"^\s*([a-zA-Z0-9._/-]+\/[a-zA-Z0-9._-]+)\s*$", re.MULTILINE)

# --- ANSI –¶–í–ï–¢–û–í–´–ï –ö–û–î–´ ---
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RESET = '\033[0m'

# --- –û–ë–©–ò–ï –£–¢–ò–õ–ò–¢–´ ---
def format_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (B, KB, MB)."""
    if size_bytes < 1024: return f"{size_bytes} B"
    if size_bytes < 1024**2: return f"{size_bytes/1024:.1f} KB"
    return f"{size_bytes/1024**2:.1f} MB"

# =============================================================================
# –†–ï–ñ–ò–ú 1: –°–ë–û–†–ö–ê –ü–†–û–ï–ö–¢–ê (GATHER)
# =============================================================================
def generate_project_tree(directory: Path, excluded_dirs: Set[str], prefix: str = "") -> List[str]:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤."""
    items = sorted([p for p in directory.iterdir() if p.name.lower() not in excluded_dirs], key=lambda x: (x.is_file(), x.name.lower()))
    tree_lines = []
    for i, item in enumerate(items):
        is_last = i == (len(items) - 1)
        connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
        tree_lines.append(f"{prefix}{connector}{item.name}")
        if item.is_dir():
            new_prefix = prefix + ("    " if is_last else "‚îÇ   ")
            tree_lines.extend(generate_project_tree(item, excluded_dirs, new_prefix))
    return tree_lines

def _gather_latest_logs(project_root: Path, excluded_dirs: Set[str]) -> List[Path]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ª–æ–≥-—Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ (–ø—Ä–µ—Ñ–∏–∫—Å–∞)."""
    latest_logs: Dict[str, Path] = {}
    log_prefix_re = re.compile(r'^([a-zA-Z_]+)_')
    all_log_files = [
        p for p in project_root.rglob("*.log")
        if not any(part.lower() in excluded_dirs for part in p.relative_to(project_root).parts)
    ]
    for file_path in all_log_files:
        match = log_prefix_re.match(file_path.name)
        if match:
            prefix = match.group(1)
            if prefix not in latest_logs or file_path.name > latest_logs[prefix].name:
                latest_logs[prefix] = file_path
    return list(latest_logs.values())

def gather_files() -> None:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª."""
    script_path = Path(sys.argv[0]).resolve()
    project_root = script_path.parent.parent
    output_filename = f"{project_root.name}_code.txt"
    output_file_path = script_path.parent / output_filename
    current_excluded_dirs = EXCLUDED_GATHER_DIRS.copy()
    current_excluded_dirs.add(script_path.parent.name.lower())
    print(f"üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤: {project_root}")
    print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–∞—Å–∫–∏: {', '.join(GATHER_FILE_PATTERNS)}")
    print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {', '.join(sorted(current_excluded_dirs))}")
    print("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    tree_header = f"# Project Structure: {project_root.name}/\n# -----------------"
    project_tree_lines = generate_project_tree(project_root, current_excluded_dirs)
    file_separator = "\n\n=======< FILE SEPARATOR >=======\n\n"
    collected_content = [tree_header, *project_tree_lines, file_separator]
    print("‚úÖ  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞.")
    print("\nüìö –°–±–æ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...")
    found_files: Set[Path] = set()
    general_patterns = [p for p in GATHER_FILE_PATTERNS if p != "*.log"]
    for pattern in general_patterns:
        for file_path in project_root.rglob(pattern):
            if not any(part.lower() in current_excluded_dirs for part in file_path.relative_to(project_root).parts):
                found_files.add(file_path)
    if "*.log" in GATHER_FILE_PATTERNS:
        latest_logs = _gather_latest_logs(project_root, current_excluded_dirs)
        for log_path in latest_logs:
            found_files.add(log_path)
    def sort_key(p: Path):
        return (GATHER_SORT_ORDER.get(p.suffix, 99), p.as_posix())
    sorted_files = sorted(list(found_files), key=sort_key)
    for file_path in sorted_files:
        relative_path = file_path.relative_to(project_root)
        try:
            content = file_path.read_text(encoding="utf-8")
            header = f"# {relative_path.as_posix()}"
            collected_content.extend([header, content, file_separator])
            print(f"  [+] –î–æ–±–∞–≤–ª–µ–Ω: {relative_path}")
        except Exception as e:
            print(f"  [!] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {relative_path}: {e}")
    if not sorted_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏.")
        return
    final_text = "\n".join(collected_content)
    output_file_path.write_text(final_text, encoding="utf-8")
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(sorted_files)}.")
    print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file_path} ({format_size(output_file_path.stat().st_size)})")

# =============================================================================
# –†–ï–ñ–ò–ú 2: –†–ê–ó–ë–û–† –ü–†–û–ï–ö–¢–ê (SPLIT)
# =============================================================================
def find_project_root(script_path: Path, project_name: str) -> Path | None:
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏, –¥–≤–∏–≥–∞—è—Å—å –≤–≤–µ—Ä—Ö –æ—Ç –ø—É—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞."""
    for parent in script_path.parents:
        if parent.name == project_name: return parent
    return None

def find_path_in_preceding_text(text: str) -> Path | None:
    """–ò—â–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ç–µ–∫—Å—Ç–µ, –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–º –±–ª–æ–∫—É –∫–æ–¥–∞."""
    candidates = PATH_CANDIDATE_RE.findall(text)
    return Path(candidates[-1].strip()) if candidates else None

def split_path_and_code(block: str) -> Tuple[Path, str] | None:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—É—Ç—å –∏ –∫–æ–¥ –∏–∑ –±–ª–æ–∫–∞, –µ—Å–ª–∏ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ."""
    lines = block.splitlines()
    if not lines: return None
    match = PATH_LINE_RE.match(lines[0].strip())
    if not match: return None
    raw_path = match.group(1).strip()
    return (Path(raw_path), block.strip() + "\n") if "/" in raw_path or "\\" in raw_path else None

def save_code(target_path: Path, code: str, script_path: Path, project_root: Path | None) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–¥. –î–ª—è —Ñ–∞–π–ª–æ–≤ –∂—É—Ä–Ω–∞–ª–∞ (*.md) –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç.
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –ª—é–±—ã–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º.
    """
    was_overwritten = target_path.is_file()
    old_size = 0
    if was_overwritten:
        old_size = target_path.stat().st_size
        backup_dir = script_path.parent / "BkUp"
        base_path = project_root if project_root else script_path.parent
        try:
            relative_backup_path = target_path.relative_to(base_path)
            backup_path = backup_dir / relative_backup_path
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(target_path, backup_path)
            print(f"üì¶  –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path.relative_to(script_path.parent)}")
        except Exception as e:
            print(f"‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")

    target_path.parent.mkdir(parents=True, exist_ok=True)
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ---
    is_journal_file = target_path.name in ["Project_journal.md", "project_history.md"]
    status = ""

    if is_journal_file and was_overwritten:
        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –∂—É—Ä–Ω–∞–ª–∞
        content_lines = code.splitlines()
        # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—É—Ç–µ–º —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
        if content_lines and PATH_LINE_RE.match(content_lines[0].strip()):
            content_to_append = "\n".join(content_lines[1:])
        else:
            content_to_append = "\n".join(content_lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –Ω–∞–ª–∏—á–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
        with target_path.open("a", encoding="utf-8") as f:
            f.write("\n" + content_to_append.strip() + "\n")
        status = "‚ûï  –î–æ–ø–æ–ª–Ω–µ–Ω–æ"
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∂—É—Ä–Ω–∞–ª–∞
        target_path.write_text(code, encoding="utf-8")
        status = "üîÑ  –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω" if was_overwritten else "üìù  –°–æ—Ö—Ä–∞–Ω–µ–Ω"

    new_size = target_path.stat().st_size
    
    significant_reduction = False
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if was_overwritten and not is_journal_file and old_size > 0 and (old_size - new_size) / old_size > 0.1:
        significant_reduction = True

    size_info = f"(—Å—Ç–∞—Ä—ã–π: {format_size(old_size)}, –Ω–æ–≤—ã–π: {format_size(new_size)})" if was_overwritten else f"({format_size(new_size)})"
    status_message = f"{status}: {target_path.relative_to(project_root if project_root else script_path.parent)} {size_info}"

    if significant_reduction:
        print(f"{RED}‚ö†Ô∏è  {status_message} - –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–û–ï –£–ú–ï–ù–¨–®–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê!{RESET}")
    else:
        print(status_message)

def rollback_changes(changed_files: List[Tuple[Path, Path | None]], script_path: Path):
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
    print(f"\n{YELLOW}--- –ù–ê–ß–ê–õ–û –û–ü–ï–†–ê–¶–ò–ò –û–¢–ö–ê–¢–ê ---{RESET}")
    backup_dir = script_path.parent / "BkUp"
    for target_path, project_root in changed_files:
        base_path = project_root if project_root else script_path.parent
        try:
            relative_backup_path = target_path.relative_to(base_path)
            backup_path = backup_dir / relative_backup_path
            if backup_path.exists():
                shutil.copy2(backup_path, target_path)
                print(f"  ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {target_path.relative_to(base_path)}")
            elif target_path.exists():
                target_path.unlink()
                print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {target_path.relative_to(base_path)}")
        except Exception as e:
            print(f"  {RED}‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ –¥–ª—è {target_path}: {e}{RESET}")
    print(f"{GREEN}--- –û–ü–ï–†–ê–¶–ò–Ø –û–¢–ö–ê–¢–ê –ó–ê–í–ï–†–®–ï–ù–ê ---{RESET}")

def split_files(input_file: Path) -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∂–∏–º–∞ 'split'."""
    try:
        raw_text = input_file.read_text(encoding="utf-8")
    except FileNotFoundError:
        print(f"‚ùå  –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ '{input_file}'")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

    script_path = Path(sys.argv[0]).resolve()
    modified_files: List[Tuple[Path, Path | None]] = []
    saved_count, noname_count, last_pos, found_blocks = 0, 1, 0, 0

    for match in CODE_BLOCK_RE.finditer(raw_text):
        found_blocks += 1
        lang, block_content = match.groups()
        block_content = block_content.strip()
        rel_path, code_to_save, project_root = None, None, None
        internal_result = split_path_and_code(block_content)
        if internal_result:
            rel_path, code_to_save = internal_result
        else:
            path_from_preceding = find_path_in_preceding_text(raw_text[last_pos:match.start()])
            if path_from_preceding:
                rel_path = path_from_preceding
                code_to_save = f"# {rel_path.as_posix()}\n{block_content}\n"
        if rel_path:
            project_name = rel_path.parts[0]
            project_root = find_project_root(script_path, project_name)
            final_path = (project_root / rel_path.relative_to(project_name)) if project_root else (script_path.parent / rel_path)
        else:
            extension = lang if lang else 'txt'
            final_path = script_path.parent / f"noname_{noname_count:02d}.{extension}"
            code_to_save = block_content + "\n"
            noname_count += 1
        save_code(final_path, code_to_save, script_path, project_root)
        modified_files.append((final_path, project_root))
        saved_count += 1
        last_pos = match.end()

    if not found_blocks:
        print("‚ùå  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞ ```‚Ä¶```")
        return
    print(f"\n{GREEN}‚úÖ  –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {saved_count}{RESET}")
    if modified_files:
        print(f"\n{YELLOW}--------------------------------------------------{RESET}")
        try:
            answer = input(f"–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è? [y/N]: ").lower().strip()
            if answer == 'y':
                rollback_changes(modified_files, script_path)
            else:
                print(f"{GREEN}–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{RESET}")
        except KeyboardInterrupt:
            print(f"\n{YELLOW}–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.{RESET}")

# =============================================================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# =============================================================================
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  –†–µ–∂–∏–º —Ä–∞–∑–±–æ—Ä–∞: python split_ai_code.py <—Ñ–∞–π–ª_–≤—ã–≤–æ–¥–∞_AI.txt>")
        print("  –†–µ–∂–∏–º —Å–±–æ—Ä–∫–∏:  python split_ai_code.py gather")
        sys.exit(1)
    command = sys.argv[1]
    if command.lower() == "gather":
        gather_files()
    else:
        input_path = Path(command)
        split_files(input_path)