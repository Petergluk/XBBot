# XBalanseBot/app/handlers/admin_commands.py
# v1.5.4 - 2025-08-16
import logging
from decimal import Decimal, InvalidOperation
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from psycopg.rows import dict_row

from app.database import db
from app.states import AdminEditStates
from app.utils import is_admin, format_amount, get_user_balance, format_transactions_history
from config import CURRENCY_SYMBOL, DEFAULT_GIDE_TEXT, DEFAULT_TEST_COMMANDS_TEXT, DEFAULT_REMINDER_TEXT, DEFAULT_WELCOME_MESSAGE_GROUP, DEFAULT_WELCOME_MESSAGE_BOT

router = Router()
logger = logging.getLogger(__name__)

@router.message.middleware()
@router.callback_query.middleware()
async def admin_middleware(handler, event, data):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ.
    """
    user_id = data['event_from_user'].id
    if not await is_admin(user_id):
        if isinstance(event, Message):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        elif isinstance(event, CallbackQuery):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    return await handler(event, data)

@router.message(Command("gide", "–≥–∏–¥", ignore_case=True))
async def cmd_gide(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    gide_text = DEFAULT_GIDE_TEXT.format(currency_symbol=CURRENCY_SYMBOL)
    await message.answer(gide_text, parse_mode="HTML")

@router.message(Command("test", ignore_case=True))
async def cmd_test(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥."""
    test_text = DEFAULT_TEST_COMMANDS_TEXT
    await message.answer(test_text, parse_mode="HTML")

@router.message(Command("users", ignore_case=True))
async def cmd_users(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã."""
    async with db.pool.connection() as conn:
        async with conn.cursor(row_factory=dict_row) as cur:
            await cur.execute("SELECT telegram_id, username, balance, transaction_count, is_admin, created_at FROM users WHERE telegram_id != 0 ORDER BY created_at DESC")
            users = await cur.fetchall()

    if not users:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
        
    page_size = 20
    total_users = len(users)
    response_parts = [f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}</b>\n\n"]
    for i, user in enumerate(users[:page_size]):
        admin_mark = "üëÆ" if user['is_admin'] else ""
        username_str = f"@{user['username']}" if user['username'] else f"ID:{user['telegram_id']}"
        created_date = user['created_at'].strftime('%d.%m.%Y')
        response_parts.append(f"{i+1}. {admin_mark}{username_str}\n   üí∞ {format_amount(user['balance'])} {CURRENCY_SYMBOL} | üìä {user['transaction_count']} —Ç—Ä. | üìÖ {created_date}\n")
    
    if total_users > page_size:
        response_parts.append(f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {page_size} –∏–∑ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>")
        
    await message.answer("".join(response_parts), parse_mode="HTML")

@router.message(Command("add", ignore_case=True))
async def cmd_add(message: Message, bot: Bot):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
        
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
        
    comment = ' '.join(args[3:]) if len(args) > 3 else "–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"
    user = await db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    async with db.pool.connection() as conn:
        async with conn.transaction():
            await conn.execute("UPDATE users SET balance = balance + %s WHERE id = %s", (amount, user['id']))
            await conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (0, %s, %s, 'manual_add', %s)", (user['id'], amount, comment))
            await conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = %s", (user['id'],))
            
    await db.handle_debt_repayment(user['id'])
    
    await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    if username != 'fund':
        try:
            await bot.send_message(user['telegram_id'], f"üí∞ –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")

@router.message(Command("rem", ignore_case=True))
async def cmd_rem(message: Message, bot: Bot):
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /rem @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
        
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
        
    comment = ' '.join(args[3:]) if len(args) > 3 else "–†—É—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ"
    user = await db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    async with db.pool.connection() as conn:
        async with conn.transaction():
            await conn.execute("UPDATE users SET balance = balance - %s WHERE id = %s", (amount, user['id']))
            await conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (%s, 0, %s, 'manual_rem', %s)", (user['id'], amount, comment))
            await conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = %s", (user['id'],))
            
    await message.answer(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    if username != 'fund':
        try:
            await bot.send_message(user['telegram_id'], f"üí∞ –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –æ —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")

@router.message(Command("check", ignore_case=True))
async def cmd_check(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö."""
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /check @username")
        return
        
    username = args[1].lstrip('@').lower()
    user = await db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    balance = await get_user_balance(user['telegram_id'])
    response_parts = [
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{user['username']}</b>\n",
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(balance)} {CURRENCY_SYMBOL}\n",
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {user['transaction_count']}\n",
        f"üí≥ –ö—Ä–µ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {'–î–∞' if user['grace_credit_used'] else '–ù–µ—Ç'}\n",
        f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if user['is_admin'] else '–ù–µ—Ç'}\n",
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at'].strftime('%d.%m.%Y')}\n"
    ]

    async with db.pool.connection() as conn:
        async with conn.cursor(row_factory=dict_row) as cur:
            date_limit = datetime.now() - timedelta(days=30)
            await cur.execute("""
                SELECT t.*, 
                       sender.username as sender_username,
                       recipient.username as recipient_username
                FROM transactions t
                LEFT JOIN users sender ON t.from_user_id = sender.id
                LEFT JOIN users recipient ON t.to_user_id = recipient.id
                WHERE (t.to_user_id = %s OR t.from_user_id = %s) AND t.created_at > %s
                ORDER BY t.created_at DESC
            """, (user['id'], user['id'], date_limit))
            all_txs = await cur.fetchall()

    if not all_txs:
        response_parts.append("\n<i>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—É—Å—Ç–∞.</i>")
    else:
        response_parts.append("\n<b>üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>")
        history_text = format_transactions_history(all_txs, user['id'])
        response_parts.append(history_text)

    await message.answer("".join(response_parts), parse_mode="HTML")


@router.message(Command("pay_from_fund", ignore_case=True))
async def cmd_pay_from_fund(message: Message, bot: Bot):
    """–í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ —Ñ–æ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /pay_from_fund @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
        
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
        
    comment = ' '.join(args[3:]) if len(args) > 3 else "–í—ã–ø–ª–∞—Ç–∞ –∏–∑ —Ñ–æ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    recipient = await db.get_user(username=username)
    if not recipient:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    fund = await db.get_user(telegram_id=0)
    if fund['balance'] < amount:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ñ–æ–Ω–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {format_amount(fund['balance'])} {CURRENCY_SYMBOL}")
        return
        
    async with db.pool.connection() as conn:
        async with conn.transaction():
            await conn.execute("UPDATE users SET balance = balance - %s WHERE id = %s", (amount, fund['id']))
            await conn.execute("UPDATE users SET balance = balance + %s WHERE id = %s", (amount, recipient['id']))
            await conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (%s, %s, %s, 'fund_payment', %s)", (fund['id'], recipient['id'], amount, comment))
            await conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = %s", (recipient['id'],))

    await db.handle_debt_repayment(recipient['id'])
    
    logger.info(f"Admin {message.from_user.id} paid {amount} from fund to user {recipient['telegram_id']}")
    await message.answer(f"‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} –∏–∑ —Ñ–æ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    
    try:
        await bot.send_message(recipient['telegram_id'], f"üí∞ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤—ã–ø–ª–∞—Ç–∞ –∏–∑ —Ñ–æ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {format_amount(amount)} {CURRENCY_SYMBOL}.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient['telegram_id']} –æ –≤—ã–ø–ª–∞—Ç–µ –∏–∑ —Ñ–æ–Ω–¥–∞: {e}")


# --- –ù–û–í–´–ô –ë–õ–û–ö: –°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ò –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê–ú–ò ---

@router.message(Command("make_admin", ignore_case=True))
async def cmd_make_admin(message: Message):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /make_admin @username")
        return
    username = args[1].lstrip('@').lower()
    user = await db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if user['is_admin']:
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    await db.set_admin_status(user['telegram_id'], is_admin=True)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@router.message(Command("remove_admin", ignore_case=True))
async def cmd_remove_admin(message: Message):
    """–°–Ω–∏–º–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /remove_admin @username")
        return
    username = args[1].lstrip('@').lower()
    user = await db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if not user['is_admin']:
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    await db.set_admin_status(user['telegram_id'], is_admin=False)
    await message.answer(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(Command("edit_welcome_bot", ignore_case=True))
async def cmd_edit_welcome_bot(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ."""
    current_text = await db.get_setting('welcome_message_bot', DEFAULT_WELCOME_MESSAGE_BOT)
    await state.set_state(AdminEditStates.waiting_for_welcome_text)
    await message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –õ–°:\n\n{current_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode=None)

@router.message(AdminEditStates.waiting_for_welcome_text)
async def process_new_welcome_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è."""
    await db.set_setting('welcome_message_bot', message.html_text)
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω.")

@router.message(Command("edit_welcome_group", ignore_case=True))
async def cmd_edit_welcome_group(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ."""
    current_text = await db.get_setting('welcome_message_group', DEFAULT_WELCOME_MESSAGE_GROUP)
    await state.set_state(AdminEditStates.waiting_for_welcome_text_group)
    await message.answer(f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ:\n\n{current_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode=None)

@router.message(AdminEditStates.waiting_for_welcome_text_group)
async def process_new_welcome_text_group(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    await db.set_setting('welcome_message_group', message.html_text)
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω.")

@router.message(Command("edit_reminder", ignore_case=True))
async def cmd_edit_reminder(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    current_text = await db.get_setting('default_reminder_text', DEFAULT_REMINDER_TEXT)
    await state.set_state(AdminEditStates.waiting_for_reminder_text)
    await message.answer(f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n<code>{current_text}</code>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode='HTML')

@router.message(AdminEditStates.waiting_for_reminder_text)
async def process_new_reminder_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await db.set_setting('default_reminder_text', message.html_text)
    await state.clear()
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.")

@router.message(Command("welcome_bonus", ignore_case=True))
async def cmd_set_welcome_bonus(message: Message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É–º–º—É welcome-–±–æ–Ω—É—Å–∞."""
    args = message.text.split()
    if len(args) < 2:
        current_bonus = await db.get_setting('welcome_bonus_amount', '0')
        await message.reply(f"–¢–µ–∫—É—â–∏–π welcome-–±–æ–Ω—É—Å: {current_bonus} {CURRENCY_SYMBOL}.\n–§–æ—Ä–º–∞—Ç: /welcome_bonus [—Å—É–º–º–∞]")
        return
    try:
        amount = Decimal(args[1])
        if amount < 0: raise ValueError
        await db.set_setting('welcome_bonus_amount', str(amount))
        await message.answer(f"‚úÖ Welcome-–±–æ–Ω—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä–∞–∑–º–µ—Ä–µ {format_amount(amount)} {CURRENCY_SYMBOL}.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

@router.message(Command("demurrage_on", ignore_case=True))
async def cmd_demurrage_on(message: Message):
    await db.set_setting('demurrage_enabled', '1')
    await message.answer("‚úÖ –î–µ–º–µ—Ä—Ä–µ–¥–∂ –≤–∫–ª—é—á–µ–Ω.")

@router.message(Command("demurrage_off", ignore_case=True))
async def cmd_demurrage_off(message: Message):
    await db.set_setting('demurrage_enabled', '0')
    await message.answer("‚úÖ –î–µ–º–µ—Ä—Ä–µ–¥–∂ –≤—ã–∫–ª—é—á–µ–Ω.")

@router.message(Command("demurrage_status", ignore_case=True))
async def cmd_demurrage_status(message: Message):
    is_enabled = await db.get_setting('demurrage_enabled', '0') == '1'
    rate = Decimal(await db.get_setting('demurrage_rate', '0.01')) * 100
    interval = await db.get_setting('demurrage_interval_days', '1')
    last_run = await db.get_setting('demurrage_last_run', '1970-01-01')
    status = "–í–∫–ª—é—á–µ–Ω ‚úÖ" if is_enabled else "–í—ã–∫–ª—é—á–µ–Ω ‚ùå"
    await message.answer(
        f"<b>–°—Ç–∞—Ç—É—Å –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞:</b>\n\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: <b>{status}</b>\n"
        f"–°—Ç–∞–≤–∫–∞: <b>{rate:.2f}%</b>\n"
        f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>–∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: <b>{last_run}</b>"
    )

@router.message(Command("set_demurrage", ignore_case=True))
async def cmd_set_demurrage(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /set_demurrage [–ø—Ä–æ—Ü–µ–Ω—Ç]")
        return
    try:
        percent = Decimal(args[1])
        if not (0 <= percent <= 100): raise ValueError
        rate = percent / 100
        await db.set_setting('demurrage_rate', str(rate))
        await message.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {percent:.2f}%.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.")

@router.message(Command("set_exchange", ignore_case=True))
async def cmd_set_exchange(message: Message):
    args = message.text.split()
    if len(args) < 2:
        await message.reply(f"‚ùå –§–æ—Ä–º–∞—Ç: /set_exchange [–∫—É—Ä—Å]\n(–°–∫–æ–ª—å–∫–æ {CURRENCY_SYMBOL} –¥–∞–≤–∞—Ç—å –∑–∞ 1 RUB)")
        return
    try:
        rate = Decimal(args[1])
        if rate < 0: raise ValueError
        await db.set_setting('exchange_rate', str(rate))
        await message.answer(f"‚úÖ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1 RUB = {format_amount(rate)} {CURRENCY_SYMBOL}.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
