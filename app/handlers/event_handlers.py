# XBalanseBot/app/handlers/event_handlers.py
# v1.5.8 - 2025-08-17 (explicit MSK in user-visible times)
import logging
from datetime import datetime, timedelta
from decimal import Decimal, InvalidOperation
from zoneinfo import ZoneInfo
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.database import db
from app.keyboards import (
    get_events_keyboard, get_event_details_keyboard, confirm_delete_keyboard,
    get_activities_keyboard_for_event, get_event_edit_keyboard, get_weekday_keyboard
)
from app.states import EventCreationStates, EventEditStates
from app.utils import is_admin, format_amount, get_next_run_time
from config import CURRENCY_SYMBOL, DEFAULT_REMINDER_TEXT
from app.services.scheduler_jobs import schedule_event_jobs, remove_event_jobs

router = Router()
logger = logging.getLogger(__name__)

weekdays_map = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

MOSCOW_TZ = ZoneInfo("Europe/Moscow")
MSK_LABEL = "MSK"

REMINDER_VARIABLES_HELP_TEXT = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>
<code>{event_name}</code> - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
<code>{event_description}</code> - –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
<code>{start_date}</code> - –¥–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)
<code>{start_time}</code> - –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–ß–ß:–ú–ú)
<code>{cost}</code> - —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è
<code>{currency_symbol}</code> - —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
<code>{reminder_minutes}</code> - –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
<code>{link}</code> - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
"""

@router.message(Command("event", ignore_case=True))
async def cmd_event(message: Message):
    events = await db.get_all_events()
    if not events:
        await message.answer("–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    now = datetime.now(MOSCOW_TZ)
    week_ahead = now + timedelta(days=7)

    # –û—Ç–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º –¥–∞—Ç
    dated = []
    for event in events:
        next_run = get_next_run_time(
            event['event_type'],
            event.get('event_date'),
            event.get('weekday'),
            event.get('event_time'),
            event.get('last_run')
        )
        if next_run:
            dated.append((next_run, event))

    dated.sort(key=lambda x: x[0])
    this_week = [e for e in dated if e[0] <= week_ahead]
    if not this_week:
        await message.answer("–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return

    keyboard = await get_events_keyboard([event for _, event in this_week])
    await message.answer(
        "üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π (–≤—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ MSK):",
        reply_markup=keyboard
    )

@router.callback_query(F.data.regexp(r"^event_\d+$"))
async def process_event_selection(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[1])
    event = await db.get_event(event_id)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    event_name = event['name'] or event['activity_name']
    event_description = event['description'] or event['activity_description']

    schedule_str = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    if event['event_type'] == 'single' and event['event_date']:
        schedule_str = f"üìÖ –î–∞—Ç–∞: {event['event_date'].strftime('%d.%m.%Y –≤ %H:%M')} ({MSK_LABEL})"
    elif event['event_type'] == 'recurring' and event['weekday'] is not None and event['event_time'] is not None:
        next_run = get_next_run_time(
            event['event_type'], event.get('event_date'),
            event.get('weekday'), event.get('event_time'),
            event.get('last_run')
        )
        if next_run:
            schedule_str = (
                f"üìÖ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π {weekdays_map[event['weekday']]}\n"
                f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ: {next_run.strftime('%d.%m.%Y –≤ %H:%M')} ({MSK_LABEL})"
            )
        else:
            schedule_str = (
                f"üìÖ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å: –∫–∞–∂–¥—ã–π {weekdays_map[event['weekday']]} "
                f"–≤ {event['event_time'].strftime('%H:%M')} ({MSK_LABEL})"
            )

    text = (
        f"<b>{event_name}</b>\n\n"
        f"<i>{event_description}</i>\n\n"
        f"{schedule_str}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_amount(event['cost'])} {CURRENCY_SYMBOL}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    keyboard = await get_event_details_keyboard(event_id)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "back_to_events")
async def back_to_events_list(callback: CallbackQuery):
    await cmd_event(callback.message)
    await callback.answer()

@router.message(Command("create_event", ignore_case=True))
async def cmd_create_event(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    activities = await db.get_all_activities()
    keyboard = await get_activities_keyboard_for_event(activities)
    await state.set_state(EventCreationStates.waiting_for_activity)
    await message.answer("–ö –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("create_event_for_"))
async def start_event_creation_from_activity(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    activity_id = int(callback.data.split("_")[3])
    await state.update_data(activity_id=activity_id)
    await state.set_state(EventCreationStates.waiting_for_event_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –∏–ª–∏ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_activity_"), EventCreationStates.waiting_for_activity)
async def process_event_activity(callback: CallbackQuery, state: FSMContext):
    activity_id = int(callback.data.split("_")[2])
    await state.update_data(activity_id=activity_id)
    await state.set_state(EventCreationStates.waiting_for_event_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –∏–ª–∏ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(EventCreationStates.waiting_for_event_name)
async def process_event_name(message: Message, state: FSMContext):
    name = message.text
    if name.strip().lower() in ['.', '–Ω–µ—Ç']:
        name = None
    await state.update_data(name=name)
    await state.set_state(EventCreationStates.waiting_for_event_description)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –∏–ª–∏ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
        parse_mode="Markdown"
    )

@router.message(EventCreationStates.waiting_for_event_description)
async def process_event_description(message: Message, state: FSMContext):
    desc = message.text
    if desc.strip().lower() in ['.', '–Ω–µ—Ç']:
        desc = None
    await state.update_data(description=desc)
    await state.set_state(EventCreationStates.waiting_for_type)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–∑–æ–≤–æ–µ", callback_data="event_type_single")],
        [InlineKeyboardButton(text="–†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="event_type_recurring")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("event_type_"), EventCreationStates.waiting_for_type)
async def process_event_type(callback: CallbackQuery, state: FSMContext):
    event_type = callback.data.split("_")[2]
    await state.update_data(event_type=event_type)

    if event_type == "single":
        await state.set_state(EventCreationStates.waiting_for_date)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (–≤—Ä–µ–º—è –≤ MSK)\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="HTML"
        )
    else:
        await state.set_state(EventCreationStates.waiting_for_weekday)
        keyboard = get_weekday_keyboard()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–≤—Ä–µ–º—è –¥–∞–ª–µ–µ —Ç–∞–∫–∂–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ MSK):",
            reply_markup=keyboard
        )
    await callback.answer()

async def proceed_to_cost_or_skip(message: Message, state: FSMContext):
    data = await state.get_data()
    activity_id = data.get('activity_id')

    await state.set_state(EventCreationStates.waiting_for_cost)
    if activity_id == 1:
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –æ–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ.\n"
            "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è (—á–∏—Å–ª–æ). –í–≤–µ–¥–∏—Ç–µ 0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n\n"
            "–í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ MSK.\n\n"
            "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è (—á–∏—Å–ª–æ).\n\n"
            "–í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ MSK.\n\n"
            "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
            parse_mode="Markdown"
        )

@router.message(EventCreationStates.waiting_for_date)
async def process_event_date(message: Message, state: FSMContext):
    date_text = message.text.replace(',', '.')
    try:
        naive = datetime.strptime(date_text, "%d.%m.%Y %H:%M")
        event_date = naive.replace(tzinfo=MOSCOW_TZ)

        if event_date < datetime.now(MOSCOW_TZ):
            await message.reply("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (MSK).")
            return

        await state.update_data(event_date=event_date, weekday=None, event_time=None)
        await proceed_to_cost_or_skip(message, state)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (MSK).", parse_mode="HTML")

@router.callback_query(F.data.startswith("select_weekday_"), EventCreationStates.waiting_for_weekday)
async def process_event_weekday(callback: CallbackQuery, state: FSMContext):
    weekday = int(callback.data.split("_")[2])
    await state.update_data(weekday=weekday)
    await state.set_state(EventCreationStates.waiting_for_time)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{weekdays_map[weekday].capitalize()}</b>.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (MSK).",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EventCreationStates.waiting_for_time)
async def process_event_time(message: Message, state: FSMContext):
    try:
        event_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(event_time=event_time, event_date=None)
        await message.answer(f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{event_time.strftime('%H:%M')} ({MSK_LABEL})</b>.", parse_mode="HTML")
        await proceed_to_cost_or_skip(message, state)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (MSK).", parse_mode="HTML")

@router.message(EventCreationStates.waiting_for_cost)
async def process_event_cost(message: Message, state: FSMContext):
    try:
        cost = Decimal(message.text)
        if cost < 0:
            raise ValueError()
        await state.update_data(cost=str(cost))
        await state.set_state(EventCreationStates.waiting_for_link)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —á–∞—Ç –∏–ª–∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(EventCreationStates.waiting_for_link)
async def process_event_link(message: Message, state: FSMContext):
    await state.update_data(link=message.text)
    await state.set_state(EventCreationStates.waiting_for_reminder_time)
    await message.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(EventCreationStates.waiting_for_reminder_time)
async def process_event_reminder_time(message: Message, state: FSMContext):
    try:
        reminder_time = int(message.text)
        if reminder_time < 0:
            raise ValueError()
        await state.update_data(reminder_time=reminder_time)
        if reminder_time > 0:
            await state.set_state(EventCreationStates.waiting_for_reminder_text)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                f"{REMINDER_VARIABLES_HELP_TEXT}\n\n"
                f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤ —Ç–µ–∫—Å—Ç–µ ({MSK_LABEL}) —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∞.\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode="HTML"
            )
        else:
            await state.update_data(reminder_text=None)
            await create_event_from_state(message, state)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(EventCreationStates.waiting_for_reminder_text)
async def process_event_reminder_text(message: Message, state: FSMContext):
    await state.update_data(reminder_text=message.text)
    await create_event_from_state(message, state)

async def create_event_from_state(message: Message, state: FSMContext):
    data = await state.get_data()
    bot = message.bot
    scheduler = bot.scheduler

    event_data = {
        'activity_id': data.get('activity_id'),
        'name': data.get('name'),
        'description': data.get('description'),
        'event_type': data['event_type'],
        'cost': data['cost'],
        'link': data['link'],
        'reminder_time': data['reminder_time'],
        'reminder_text': data.get('reminder_text'),
        'created_by': message.from_user.id,
        'event_date': data.get('event_date'),
        'weekday': data.get('weekday'),
        'event_time': data.get('event_time')
    }

    event_id = await db.create_event(**event_data)
    event_details = await db.get_event(event_id)
    if event_details:
        await schedule_event_jobs(event_details, bot, scheduler)

    await state.clear()
    logger.info(f"Admin {message.from_user.id} created new event {event_id}.")
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (ID: {event_id}).")

@router.message(Command("edit_event", ignore_case=True))
async def cmd_edit_event(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    events = await db.get_all_events()
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    keyboard = await get_events_keyboard(events, action="edit")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ MSK):", reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_event_"))
async def process_edit_event_selection(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[2])
    event = await db.get_event(event_id)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    await state.update_data(event_id=event_id)

    event_name = event['name'] or event['activity_name']
    event_description = event['description'] or event['activity_description']

    info_parts = [
        f"<b>üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</b>\n",
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{event_name}</code>",
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{event_description[:50]}{'...' if len(event_description) > 50 else ''}</code>"
    ]

    if event['event_type'] == 'single' and event['event_date']:
        info_parts.append(f"<b>–î–∞—Ç–∞:</b> <code>{event['event_date'].strftime('%d.%m.%Y %H:%M')} ({MSK_LABEL})</code>")
    elif event['event_type'] == 'recurring':
        if event['weekday'] is not None:
            info_parts.append(f"<b>–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b> <code>{weekdays_map[event['weekday']].capitalize()}</code>")
        if event['event_time'] is not None:
            info_parts.append(f"<b>–í—Ä–µ–º—è:</b> <code>{event['event_time'].strftime('%H:%M')} ({MSK_LABEL})</code>")

    info_parts.extend([
        f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{format_amount(event['cost'])} {CURRENCY_SYMBOL}</code>",
        f"<b>–°—Å—ã–ª–∫–∞:</b> <code>{event['link']}</code>",
        f"<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> <code>{'–ó–∞ ' + str(event['reminder_time']) + ' –º–∏–Ω.' if event['reminder_time'] else '–ù–µ—Ç'}</code>",
        "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    ])

    info_text = "\n".join(info_parts)

    keyboard = await get_event_edit_keyboard(event_id)
    await callback.message.edit_text(info_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("edit_evt_name_"))
async def process_edit_event_name(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[3])
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditStates.waiting_for_new_name)

    event = await db.get_event(event_id)
    current_name = event['name'] or event['activity_name']

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <code>{current_name}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ `.` —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EventEditStates.waiting_for_new_name)
async def update_event_name(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']

    new_name = message.text if message.text != '.' else None
    await db.update_event(event_id, name=new_name)

    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.callback_query(F.data.startswith("edit_evt_description_"))
async def process_edit_event_description(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[3])
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditStates.waiting_for_new_description)

    event = await db.get_event(event_id)
    current_desc = event['description'] or event['activity_description']

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <code>{current_desc}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ `.` —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EventEditStates.waiting_for_new_description)
async def update_event_description(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']

    new_desc = message.text if message.text != '.' else None
    await db.update_event(event_id, description=new_desc)

    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.callback_query(F.data.startswith("edit_evt_schedule_"))
async def process_edit_event_schedule(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[3])
    event = await db.get_event(event_id)

    await state.update_data(event_id=event_id)

    if event['event_type'] == 'single':
        await state.set_state(EventEditStates.waiting_for_new_date)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (MSK)\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="HTML"
        )
    else:
        await state.set_state(EventEditStates.waiting_for_new_weekday)
        keyboard = get_weekday_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)

    await callback.answer()

@router.message(EventEditStates.waiting_for_new_date)
async def update_event_date(message: Message, state: FSMContext):
    try:
        naive = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        new_date = naive.replace(tzinfo=MOSCOW_TZ)

        data = await state.get_data()
        event_id = data['event_id']

        await db.update_event(event_id, event_date=new_date)

        bot = message.bot
        scheduler = bot.scheduler
        remove_event_jobs(event_id, scheduler)
        event = await db.get_event(event_id)
        if event:
            await schedule_event_jobs(event, bot, scheduler)

        await message.answer("‚úÖ –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
        await state.clear()
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b> (MSK).", parse_mode="HTML")

@router.callback_query(F.data.startswith("select_weekday_"), EventEditStates.waiting_for_new_weekday)
async def update_event_weekday(callback: CallbackQuery, state: FSMContext):
    weekday = int(callback.data.split("_")[2])
    await state.update_data(weekday=weekday)
    await state.set_state(EventEditStates.waiting_for_new_time)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω: <b>{weekdays_map[weekday].capitalize()}</b>.\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (MSK).",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EventEditStates.waiting_for_new_time)
async def update_event_time(message: Message, state: FSMContext):
    try:
        new_time = datetime.strptime(message.text, "%H:%M").time()
        data = await state.get_data()
        event_id = data['event_id']
        weekday = data['weekday']

        await db.update_event(event_id, weekday=weekday, event_time=new_time)

        bot = message.bot
        scheduler = bot.scheduler
        remove_event_jobs(event_id, scheduler)
        event = await db.get_event(event_id)
        if event:
            await schedule_event_jobs(event, bot, scheduler)

        await message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        await state.clear()
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b> (MSK).", parse_mode="HTML")

@router.callback_query(F.data.startswith("edit_evt_cost_"))
async def process_edit_event_cost(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[3])
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditStates.waiting_for_new_cost)

    event = await db.get_event(event_id)
    current_cost = format_amount(event['cost'])

    text = f"–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <code>{current_cost} {CURRENCY_SYMBOL}</code>\n\n"
    if event['activity_id'] == 1:
        text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –æ–±—â–µ–µ —Å–æ–±—ã—Ç–∏–µ. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞—Ç—Ä–æ–Ω–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"

    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

@router.message(EventEditStates.waiting_for_new_cost)
async def update_event_cost(message: Message, state: FSMContext):
    try:
        new_cost = Decimal(message.text)
        if new_cost < 0:
            raise ValueError()

        data = await state.get_data()
        event_id = data['event_id']

        await db.update_event(event_id, cost=str(new_cost))

        await message.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        await state.clear()
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.callback_query(F.data.startswith("edit_evt_link_"))
async def process_edit_event_link(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[3])
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditStates.waiting_for_new_link)

    event = await db.get_event(event_id)

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: <code>{event['link']}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EventEditStates.waiting_for_new_link)
async def update_event_link(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']

    await db.update_event(event_id, link=message.text)

    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data.startswith("edit_evt_reminder_"))
async def process_edit_event_reminder(callback: CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[3])
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditStates.waiting_for_new_reminder_time)

    event = await db.get_event(event_id)
    current_time = event['reminder_time'] or 0

    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: <code>{'–ó–∞ ' + str(current_time) + ' –º–∏–Ω.' if current_time else '–ù–µ—Ç'}</code>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (0 - –æ—Ç–∫–ª—é—á–∏—Ç—å).\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(EventEditStates.waiting_for_new_reminder_time)
async def update_event_reminder_time(message: Message, state: FSMContext):
    try:
        new_time = int(message.text)
        if new_time < 0:
            raise ValueError()

        data = await state.get_data()
        event_id = data['event_id']

        await state.update_data(reminder_time=new_time)

        if new_time > 0:
            await state.set_state(EventEditStates.waiting_for_new_reminder_text)
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ `.` –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
                f"{REMINDER_VARIABLES_HELP_TEXT}\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                parse_mode="HTML"
            )
        else:
            await db.update_event(event_id, reminder_time=0, reminder_text=None)
            bot = message.bot
            scheduler = bot.scheduler
            try:
                scheduler.remove_job(f"event_reminder_{event_id}")
            except Exception:
                pass
            await message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
            await state.clear()
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(EventEditStates.waiting_for_new_reminder_text)
async def update_event_reminder_text(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    reminder_time = data['reminder_time']
    reminder_text = message.text if message.text != '.' else DEFAULT_REMINDER_TEXT

    await db.update_event(event_id, reminder_time=reminder_time, reminder_text=reminder_text)

    bot = message.bot
    scheduler = bot.scheduler
    event = await db.get_event(event_id)

    remove_event_jobs(event_id, scheduler)
    if event:
        await schedule_event_jobs(event, bot, scheduler)

    await message.answer("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()
