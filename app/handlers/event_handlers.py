import logging
from datetime import datetime, time
from decimal import Decimal, InvalidOperation
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from app.database import db
from app.keyboards import (
    get_events_keyboard, get_event_details_keyboard, confirm_delete_keyboard, 
    get_activities_keyboard_for_event, get_event_edit_keyboard, get_weekday_keyboard
)
from app.states import EventCreationStates, EventEditStates
from app.utils import is_admin, format_amount
from config import CURRENCY_SYMBOL, DEFAULT_REMINDER_TEXT
from app.services.scheduler_jobs import schedule_event_jobs, remove_event_jobs

router = Router()
logger = logging.getLogger(__name__)
weekdays_map = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü—É", "—Å—É–±–±–æ—Ç—É", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
weekdays_short_map = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

@router.message(Command("event", ignore_case=True))
async def cmd_event(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
    events = db.get_all_events()
    if not events:
        await message.answer("–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        return
    
    keyboard = await get_events_keyboard(events)
    await message.answer("–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.regexp(r"^event_\d+$"))
async def process_event_selection(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    event_id = int(callback.data.split("_")[1])
    event = db.get_event(event_id)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    event_name = event['name'] or event['activity_name']
    event_description = event['description'] or event['activity_description']
    
    schedule_str = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
    if event['event_type'] == 'single' and event['event_date']:
        event_date = event['event_date']
        if isinstance(event_date, str): event_date = datetime.fromisoformat(event_date)
        schedule_str = f"üìÖ <b>–î–∞—Ç–∞:</b> {event_date.strftime('%d.%m.%Y –≤ %H:%M')}"
    elif event['event_type'] == 'recurring' and event['weekday'] is not None and event['event_time'] is not None:
        event_time = event['event_time']
        if isinstance(event_time, str): event_time = time.fromisoformat(event_time)
        schedule_str = f"üìÖ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å:</b> –ö–∞–∂–¥—ã–π {weekdays_map[event['weekday']]} –≤ {event_time.strftime('%H:%M')}"

    text = (
        f"<b>{event_name}</b>\n\n"
        f"<i>{event_description}</i>\n\n"
        f"{schedule_str}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {format_amount(Decimal(str(event['cost'])))} {CURRENCY_SYMBOL}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    
    keyboard = await get_event_details_keyboard(event_id)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
    await callback.answer()

@router.callback_query(F.data == "back_to_events")
async def back_to_events_list(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π."""
    events = db.get_all_events()
    if not events:
        await callback.message.edit_text("–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.")
        await callback.answer()
        return
        
    keyboard = await get_events_keyboard(events)
    await callback.message.edit_text("–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:", reply_markup=keyboard)
    await callback.answer()

# --- Admin commands for events ---

@router.message(Command("create_event", ignore_case=True))
async def cmd_create_event(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    if not await is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    activities = db.get_all_activities()
    keyboard = await get_activities_keyboard_for_event(activities)
    await state.set_state(EventCreationStates.waiting_for_activity)
    await message.answer("–ö –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ?", reply_markup=keyboard)

@router.callback_query(F.data.startswith("create_event_for_"))
async def start_event_creation_from_activity(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π, —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return

    activity_id = int(callback.data.split("_")[3])
    await state.update_data(activity_id=activity_id)
    await state.set_state(EventCreationStates.waiting_for_event_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –∏–ª–∏ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_activity_"), EventCreationStates.waiting_for_activity)
async def process_event_activity(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è."""
    activity_id = int(callback.data.split("_")[2])
    await state.update_data(activity_id=activity_id)
    await state.set_state(EventCreationStates.waiting_for_event_name)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –∏–ª–∏ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(EventCreationStates.waiting_for_event_name)
async def process_event_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ."""
    event_name = message.text
    if event_name.strip() in ['.', '–Ω–µ—Ç']:
        event_name = None

    await state.update_data(name=event_name)
    await state.set_state(EventCreationStates.waiting_for_event_description)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –∏–ª–∏ `–Ω–µ—Ç`, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n"
        "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
        parse_mode="Markdown"
    )

@router.message(EventCreationStates.waiting_for_event_description)
async def process_event_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–≥–æ —Ç–∏–ø."""
    event_description = message.text
    if event_description.strip() in ['.', '–Ω–µ—Ç']:
        event_description = None

    await state.update_data(description=event_description)
    await state.set_state(EventCreationStates.waiting_for_type)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–∑–æ–≤–æ–µ", callback_data="event_type_single")],
        [InlineKeyboardButton(text="–†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="event_type_recurring")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("event_type_"), EventCreationStates.waiting_for_type)
async def process_event_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è (—Ä–∞–∑–æ–≤–æ–µ/—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ)."""
    event_type = callback.data.split("_")[2]
    await state.update_data(event_type=event_type)
    
    if event_type == "single":
        await state.set_state(EventCreationStates.waiting_for_date)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel", parse_mode="HTML")
    else:
        await state.set_state(EventCreationStates.waiting_for_weekday)
        keyboard = get_weekday_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:", reply_markup=keyboard)
    await callback.answer()

# –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–≥–∞ —Å —Ü–µ–Ω–æ–π
async def proceed_to_cost_or_skip(message: Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫ –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (ID=1).
    –ï—Å–ª–∏ –¥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–µ–Ω—É 0 –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–Ω—É.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    data = await state.get_data()
    activity_id = data.get('activity_id')

    if activity_id == 1:
        # –î–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π (ID=1) —Ü–µ–Ω–∞ –≤—Å–µ–≥–¥–∞ 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥
        await state.update_data(cost='0')
        await state.set_state(EventCreationStates.waiting_for_link)
        await message.answer(
            "–°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —á–∞—Ç –∏–ª–∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é).\n\n"
            "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
            parse_mode="Markdown"
        )
        logger.info("Event creation for general activity (ID=1), skipping cost step.")
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
        await state.set_state(EventCreationStates.waiting_for_cost)
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è (—á–∏—Å–ª–æ).\n\n"
            "*–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel*",
            parse_mode="Markdown"
        )

@router.message(EventCreationStates.waiting_for_date)
async def process_event_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    try:
        event_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(event_date=event_date, weekday=None, event_time=None)
        # –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–∑–æ–≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        await proceed_to_cost_or_skip(message, state)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</b>.", parse_mode="HTML")

@router.callback_query(F.data.startswith("select_weekday_"), EventCreationStates.waiting_for_weekday)
async def process_event_weekday(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    weekday = int(callback.data.split("_")[2])
    await state.update_data(weekday=weekday)
    await state.set_state(EventCreationStates.waiting_for_time)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{weekdays_map[weekday].capitalize()}</b>.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>.", parse_mode="HTML")
    await callback.answer()

@router.message(EventCreationStates.waiting_for_time)
async def process_event_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    try:
        event_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(event_time=event_time, event_date=None)
        # –ò–ó–ú–ï–ù–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        await message.answer(f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{event_time.strftime('%H:%M')}</b>.", parse_mode="HTML")
        await proceed_to_cost_or_skip(message, state)
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>.", parse_mode="HTML")

@router.message(EventCreationStates.waiting_for_cost)
async def process_event_cost(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–±—ã—Ç–∏–∏."""
    try:
        cost = Decimal(message.text)
        if cost < 0: raise ValueError()
        await state.update_data(cost=str(cost))
        await state.set_state(EventCreationStates.waiting_for_link)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —á–∞—Ç –∏–ª–∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(EventCreationStates.waiting_for_link)
async def process_event_link(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ."""
    await state.update_data(link=message.text)
    await state.set_state(EventCreationStates.waiting_for_reminder_time)
    await message.answer("–ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(EventCreationStates.waiting_for_reminder_time)
async def process_event_reminder_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        reminder_time = int(message.text)
        if reminder_time < 0: raise ValueError()
        await state.update_data(reminder_time=reminder_time)
        if reminder_time > 0:
            await state.set_state(EventCreationStates.waiting_for_reminder_text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `.` –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
        else:
            await state.update_data(reminder_text=None)
            await create_event_from_state(message, state)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(EventCreationStates.waiting_for_reminder_text)
async def process_event_reminder_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ."""
    await state.update_data(reminder_text=message.text)
    await create_event_from_state(message, state)

async def create_event_from_state(message: Message, state: FSMContext):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö FSM,
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.
    """
    data = await state.get_data()
    bot = message.bot
    scheduler = bot.scheduler

    event_data = {
        'activity_id': data.get('activity_id'),
        'name': data.get('name'),
        'description': data.get('description'),
        'event_type': data['event_type'],
        'cost': data['cost'],
        'link': data['link'],
        'reminder_time': data['reminder_time'],
        'reminder_text': data.get('reminder_text'),
        'created_by': message.from_user.id,
        'event_date': data.get('event_date'),
        'weekday': data.get('weekday'),
        'event_time': data.get('event_time')
    }
    
    event_id = db.create_event(**event_data)
    await schedule_event_jobs(db.get_event(event_id), bot, scheduler)
    
    await state.clear()
    logger.info(f"Admin {message.from_user.id} created new event {event_id}.")
    await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (ID: {event_id}).")

@router.message(Command("edit_event", ignore_case=True))
async def cmd_edit_event(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    if not await is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    events = db.get_all_events()
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
        
    keyboard = await get_events_keyboard(events, action="edit")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_event_"))
async def process_edit_event_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    event_id = int(callback.data.split("_")[2])
    await state.update_data(event_id=event_id)
    
    keyboard = await get_event_edit_keyboard(event_id)
    await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏?", reply_markup=keyboard)
    await callback.answer()

@router.message(Command("delete_event", ignore_case=True))
async def cmd_delete_event(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    if not await is_admin(message.from_user.id):
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    events = db.get_all_events()
    if not events:
        await message.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
        
    keyboard = await get_events_keyboard(events, action="delete")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("delete_event_"))
async def process_delete_confirmation(callback: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    event_id = int(callback.data.split("_")[2])
    event = db.get_event(event_id)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    
    event_name = event['name'] or event['activity_name']
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ '{event_name}'?\n"
        "<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>",
        reply_markup=confirm_delete_keyboard(f"confirm_delete_event_{event_id}"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_event_"))
async def process_delete_activity(callback: CallbackQuery):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ."""
    event_id = int(callback.data.split("_")[3])
    event = db.get_event(event_id)
    if not event:
        await callback.answer("–°–æ–±—ã—Ç–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
        return
        
    scheduler = callback.bot.scheduler
    remove_event_jobs(event_id, scheduler)
    
    db.delete_event(event_id)
    
    logger.warning(f"Admin {callback.from_user.id} deleted event {event_id}: {event['name']}")
    await callback.message.edit_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event['name'] or event['activity_name']}' –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")
    await callback.answer()
