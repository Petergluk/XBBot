# 2025-07-24 18:30:00
import logging
from decimal import Decimal, InvalidOperation
from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.database import db
from app.states import AdminEditStates, FundPaymentStates
# –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ format_transactions_history
from app.utils import is_admin, format_amount, get_user_balance, format_transactions_history
from config import CURRENCY_SYMBOL, DEFAULT_WELCOME_MESSAGE_BOT, DEFAULT_WELCOME_MESSAGE_GROUP, DEFAULT_GIDE_TEXT, DEFAULT_TEST_COMMANDS_TEXT, DEFAULT_REMINDER_TEXT

router = Router()
logger = logging.getLogger(__name__)

@router.message.middleware()
@router.callback_query.middleware()
async def admin_middleware(handler, event, data):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ.
    """
    user_id = data['event_from_user'].id
    if not await is_admin(user_id):
        if isinstance(event, Message):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        elif isinstance(event, CallbackQuery):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    return await handler(event, data)

@router.message(Command("gide", "–≥–∏–¥", ignore_case=True))
async def cmd_gide(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    gide_text = DEFAULT_GIDE_TEXT.format(currency_symbol=CURRENCY_SYMBOL)
    await message.answer(gide_text, parse_mode="HTML")

@router.message(Command("test", ignore_case=True))
async def cmd_test(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    test_text = DEFAULT_TEST_COMMANDS_TEXT
    await message.answer(test_text, parse_mode="HTML")

@router.message(Command("users", ignore_case=True))
async def cmd_users(message: Message):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã.
    """
    with db.get_connection() as conn:
        users = conn.execute("SELECT telegram_id, username, balance, transaction_count, is_admin, created_at FROM users WHERE telegram_id != 0 ORDER BY created_at DESC").fetchall()
    if not users:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    page_size = 20
    total_users = len(users)
    response_parts = [f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}</b>\n\n"]
    for i, user in enumerate(users[:page_size]):
        balance = Decimal(str(user['balance']))
        admin_mark = "üëÆ" if user['is_admin'] else ""
        username_str = f"@{user['username']}" if user['username'] else f"ID:{user['telegram_id']}"
        created_date = user['created_at'].strftime('%d.%m.%Y')
        response_parts.append(f"{i+1}. {admin_mark}{username_str}\n   üí∞ {format_amount(balance)} {CURRENCY_SYMBOL} | üìä {user['transaction_count']} —Ç—Ä. | üìÖ {created_date}\n")
    if total_users > page_size:
        response_parts.append(f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {page_size} –∏–∑ {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>")
    await message.answer("".join(response_parts), parse_mode="HTML")

@router.message(Command("add", ignore_case=True))
async def cmd_add(message: Message, bot: Bot):
    """
    –ù–∞—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    comment = ' '.join(args[3:]) if len(args) > 3 else "–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"
    user = db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with db.get_connection() as conn:
        conn.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (str(amount), user['id']))
        conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (0, ?, ?, 'manual_add', ?)", (user['id'], str(amount), comment))
        conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = ?", (user['id'],))
        conn.commit()
        db.handle_debt_repayment(user['id'])
    await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    if username != 'fund':
        try:
            await bot.send_message(user['telegram_id'], f"üí∞ –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")

@router.message(Command("rem", ignore_case=True))
async def cmd_rem(message: Message, bot: Bot):
    """
    –°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /rem @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    comment = ' '.join(args[3:]) if len(args) > 3 else "–†—É—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ"
    user = db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with db.get_connection() as conn:
        conn.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (str(amount), user['id']))
        conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (?, 0, ?, 'manual_rem', ?)", (user['id'], str(amount), comment))
        conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = ?", (user['id'],))
        conn.commit()
    await message.answer(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    if username != 'fund':
        try:
            await bot.send_message(user['telegram_id'], f"üí∞ –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –æ —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")

@router.message(Command("check", ignore_case=True))
async def cmd_check(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.
    """
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /check @username")
        return
    username = args[1].lstrip('@').lower()
    user = db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    balance = await get_user_balance(user['telegram_id'])
    response_parts = [
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{user['username']}</b>\n",
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(balance)} {CURRENCY_SYMBOL}\n",
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {user['transaction_count']}\n",
        f"üí≥ –ö—Ä–µ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {'–î–∞' if user['grace_credit_used'] else '–ù–µ—Ç'}\n",
        f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if user['is_admin'] else '–ù–µ—Ç'}\n",
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['created_at'].strftime('%d.%m.%Y')}\n"
    ]

    with db.get_connection() as conn:
        user_db_id = user['id']
        date_limit = datetime.now() - timedelta(days=30)
        all_txs = conn.execute("""
            SELECT t.*, 
                   sender.username as sender_username,
                   recipient.username as recipient_username
            FROM transactions t
            LEFT JOIN users sender ON t.from_user_id = sender.id
            LEFT JOIN users recipient ON t.to_user_id = recipient.id
            WHERE (t.to_user_id = ? OR t.from_user_id = ?) AND t.created_at > ?
            ORDER BY t.created_at DESC
        """, (user_db_id, user_db_id, date_limit)).fetchall()

    if not all_txs:
        response_parts.append("\n<i>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –ø—É—Å—Ç–∞.</i>")
    else:
        response_parts.append("\n<b>üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:</b>")
        # –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ —É—Ç–∏–ª–∏—Ç—É.
        history_text = format_transactions_history(all_txs, user['id'])
        response_parts.append(history_text)

    await message.answer("".join(response_parts), parse_mode="HTML")


@router.message(Command("pay_from_fund", ignore_case=True))
async def cmd_pay_from_fund(message: Message, bot: Bot):
    """
    –í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ —Ñ–æ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /pay_from_fund @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    comment = ' '.join(args[3:]) if len(args) > 3 else "–í—ã–ø–ª–∞—Ç–∞ –∏–∑ —Ñ–æ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    recipient = db.get_user(username=username)
    if not recipient:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    fund = db.get_user(telegram_id=0)
    fund_balance = Decimal(str(fund['balance']))
    if fund_balance < amount:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ñ–æ–Ω–¥–µ. –î–æ—Å—Ç—É–ø–Ω–æ: {format_amount(fund_balance)} {CURRENCY_SYMBOL}")
        return
    with db.get_connection() as conn:
        conn.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (str(amount), fund['id']))
        conn.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (str(amount), recipient['id']))
        conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (?, ?, ?, 'fund_payment', ?)", (fund['id'], recipient['id'], str(amount), comment))
        conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = ?", (recipient['id'],))
        conn.commit()
        db.handle_debt_repayment(recipient['id'])
    logger.info(f"Admin {message.from_user.id} paid {amount} from fund to user {recipient['telegram_id']}")
    await message.answer(f"‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} –∏–∑ —Ñ–æ–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    try:
        await bot.send_message(recipient['telegram_id'], f"üí∞ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤—ã–ø–ª–∞—Ç–∞ –∏–∑ —Ñ–æ–Ω–¥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {format_amount(amount)} {CURRENCY_SYMBOL}.\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {recipient['telegram_id']} –æ –≤—ã–ø–ª–∞—Ç–µ –∏–∑ —Ñ–æ–Ω–¥–∞: {e}")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
