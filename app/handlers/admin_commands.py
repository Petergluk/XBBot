# XBalanseBot/app/handlers/admin_commands.py
import logging
from decimal import Decimal, InvalidOperation
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.database import db
from app.states import AdminEditStates
from app.utils import is_admin, format_amount, get_user_balance
from config import CURRENCY_SYMBOL, DEFAULT_WELCOME_MESSAGE_BOT, DEFAULT_WELCOME_MESSAGE_GROUP, DEFAULT_GIDE_TEXT, DEFAULT_TEST_COMMANDS_TEXT

router = Router()
logger = logging.getLogger(__name__)

# –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: Middleware –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
# –¢–µ–ø–µ—Ä—å –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
@router.message.middleware()
@router.callback_query.middleware()
async def admin_middleware(handler, event, data):
    """
    Middleware, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤—ã–∑–≤–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É,
    —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –≠—Ç–æ—Ç middleware –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
    –≤ –¥–∞–Ω–Ω–æ–º —Ä–æ—É—Ç–µ—Ä–µ.
    """
    user_id = data['event_from_user'].id
    
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(user_id):
        if isinstance(event, Message):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        elif isinstance(event, CallbackQuery):
            await event.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    return await handler(event, data)

@router.message(Command("gide", "–≥–∏–¥", ignore_case=True))
async def cmd_gide(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    gide_text = DEFAULT_GIDE_TEXT.format(currency_symbol=CURRENCY_SYMBOL)
    await message.answer(gide_text, parse_mode="HTML")

# –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –≤—ã–≤–æ–¥–∞ —à–ø–∞—Ä–≥–∞–ª–∫–∏
@router.message(Command("test", ignore_case=True))
async def cmd_test(message: Message):
    """–í—ã–≤–æ–¥–∏—Ç —à–ø–∞—Ä–≥–∞–ª–∫—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    test_text = DEFAULT_TEST_COMMANDS_TEXT
    await message.answer(test_text, parse_mode="HTML")


@router.message(Command("add", ignore_case=True))
async def cmd_add(message: Message, bot: Bot):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /add @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return
    
    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
        
    comment = ' '.join(args[3:]) if len(args) > 3 else "–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ"
    
    user = db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with db.get_connection() as conn:
        conn.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (str(amount), user['id']))
        # –ò–ó–ú–ï–ù–ï–ù–û: ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å 0 (—Ñ–æ–Ω–¥/—Å–∏—Å—Ç–µ–º–∞)
        conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (0, ?, ?, 'manual_add', ?)",
                     (user['id'], str(amount), comment))
        conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = ?", (user['id'],))
        conn.commit()
        db.handle_debt_repayment(user['id'])

    await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}.")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–æ–Ω–¥—É
    if username != 'community_fund':
        try:
            await bot.send_message(user['telegram_id'], f"üí∞ –í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")

@router.message(Command("rem", ignore_case=True))
async def cmd_rem(message: Message, bot: Bot):
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    args = message.text.split()
    if len(args) < 3:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /rem @username —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]")
        return

    username = args[1].lstrip('@').lower()
    try:
        amount = Decimal(args[2])
        if amount <= 0: raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return

    comment = ' '.join(args[3:]) if len(args) > 3 else "–†—É—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ"

    user = db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with db.get_connection() as conn:
        conn.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (str(amount), user['id']))
        # –ò–ó–ú–ï–ù–ï–ù–û: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å 0 (—Ñ–æ–Ω–¥/—Å–∏—Å—Ç–µ–º–∞)
        conn.execute("INSERT INTO transactions (from_user_id, to_user_id, amount, type, comment) VALUES (?, 0, ?, 'manual_rem', ?)",
                     (user['id'], str(amount), comment))
        conn.execute("UPDATE users SET transaction_count = transaction_count + 1 WHERE id = ?", (user['id'],))
        conn.commit()

    await message.answer(f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    
    if username != 'community_fund':
        try:
            await bot.send_message(user['telegram_id'], f"üí∞ –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {format_amount(amount)} {CURRENCY_SYMBOL}. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']} –æ —Å–ø–∏—Å–∞–Ω–∏–∏: {e}")

@router.message(Command("check", ignore_case=True))
async def cmd_check(message: Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /check @username")
        return

    username = args[1].lstrip('@').lower()
    user = db.get_user(username=username)
    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    balance = await get_user_balance(user['telegram_id'])
    response_text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{user['username']}</b>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_amount(balance)} {CURRENCY_SYMBOL}\n"
        f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {user['transaction_count']}\n"
        f"üí≥ –ö—Ä–µ–¥–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {'–î–∞' if user['grace_credit_used'] else '–ù–µ—Ç'}\n"
        f"üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if user['is_admin'] else '–ù–µ—Ç'}"
    )
    await message.answer(response_text, parse_mode="HTML")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è–º–∏ ---

@router.message(Command("edit_welcome_bot", ignore_case=True))
async def cmd_edit_welcome_bot(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ."""
    current_text = db.get_setting('welcome_message_bot', DEFAULT_WELCOME_MESSAGE_BOT)
    await state.set_state(AdminEditStates.waiting_for_welcome_text)
    await message.answer("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É):")
    await message.answer(current_text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {username} –∏ {bot_username} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(AdminEditStates.waiting_for_welcome_text)
async def process_welcome_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –±–æ—Ç–∞."""
    db.set_setting('welcome_message_bot', message.text)
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω.")

@router.message(Command("edit_welcome_group", ignore_case=True))
async def cmd_edit_welcome_group(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ."""
    current_text = db.get_setting('welcome_message_group', DEFAULT_WELCOME_MESSAGE_GROUP)
    await state.set_state(AdminEditStates.waiting_for_welcome_text_group)
    await message.answer("–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É):")
    await message.answer(current_text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {username} –∏ {bot_username} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–æ–∫.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(AdminEditStates.waiting_for_welcome_text_group)
async def process_welcome_text_group(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã."""
    db.set_setting('welcome_message_group', message.text)
    await state.clear()
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω.")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ---

@router.message(Command("welcome_bonus", ignore_case=True))
async def cmd_welcome_bonus(message: Message, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç welcome-–±–æ–Ω—É—Å–æ–º."""
    args = message.text.split()
    
    if len(args) > 1:
        try:
            amount = Decimal(args[1])
            if amount < 0: raise ValueError()
            db.set_setting('welcome_bonus_amount', str(amount))
            if amount > 0:
                await message.answer(f"‚úÖ Welcome-–±–æ–Ω—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{format_amount(amount)} {CURRENCY_SYMBOL}</b>", parse_mode="HTML")
            else:
                await message.answer("‚úÖ Welcome-–±–æ–Ω—É—Å –æ—Ç–∫–ª—é—á–µ–Ω.")
        except (InvalidOperation, ValueError):
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è).")
        return

    current_bonus = db.get_setting('welcome_bonus_amount', '0')
    await state.set_state(AdminEditStates.waiting_for_welcome_bonus)
    await message.reply(
        f"–¢–µ–∫—É—â–∏–π welcome-–±–æ–Ω—É—Å: <b>{format_amount(Decimal(current_bonus))} {CURRENCY_SYMBOL}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
        parse_mode="HTML"
    )

@router.message(AdminEditStates.waiting_for_welcome_bonus)
async def process_welcome_bonus(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—É–º–º—É welcome-–±–æ–Ω—É—Å–∞."""
    try:
        amount = Decimal(message.text)
        if amount < 0: raise ValueError()
        db.set_setting('welcome_bonus_amount', str(amount))
        await state.clear()
        if amount > 0:
            await message.answer(f"‚úÖ Welcome-–±–æ–Ω—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{format_amount(amount)} {CURRENCY_SYMBOL}</b>", parse_mode="HTML")
        else:
            await message.answer("‚úÖ Welcome-–±–æ–Ω—É—Å –æ—Ç–∫–ª—é—á–µ–Ω.")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")

@router.message(Command("demurrage_status", ignore_case=True))
async def cmd_demurrage_status(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Å—Ç–∞–≤–∫—É –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞."""
    enabled = db.get_setting('demurrage_enabled', '0') == '1'
    rate = Decimal(db.get_setting('demurrage_rate', '0.01')) * 100
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω" if enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    await message.answer(f"–°—Ç–∞—Ç—É—Å –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞: {status_text}\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {format_amount(rate)}%")

@router.message(Command("demurrage_on", ignore_case=True))
async def cmd_demurrage_on(message: Message):
    """–í–∫–ª—é—á–∞–µ—Ç –¥–µ–º–µ—Ä—Ä–µ–¥–∂."""
    db.set_setting('demurrage_enabled', '1')
    await message.answer("‚úÖ –î–µ–º–µ—Ä—Ä–µ–¥–∂ –≤–∫–ª—é—á–µ–Ω.")

@router.message(Command("demurrage_off", ignore_case=True))
async def cmd_demurrage_off(message: Message):
    """–í—ã–∫–ª—é—á–∞–µ—Ç –¥–µ–º–µ—Ä—Ä–µ–¥–∂."""
    db.set_setting('demurrage_enabled', '0')
    await message.answer("‚ùå –î–µ–º–µ—Ä—Ä–µ–¥–∂ –æ—Ç–∫–ª—é—á–µ–Ω.")

@router.message(Command("set_demurrage", ignore_case=True))
async def cmd_set_demurrage(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞."""
    args = message.text.split()
    if len(args) > 1:
        try:
            percent = Decimal(args[1])
            if not (0 <= percent <= 100): raise ValueError()
            db.set_setting('demurrage_rate', str(percent / 100))
            await message.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {format_amount(percent)}%")
        except (InvalidOperation, ValueError):
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100.")
        return
    
    await state.set_state(AdminEditStates.waiting_for_demurrage_rate)
    rate = Decimal(db.get_setting('demurrage_rate', '0.01')) * 100
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: {format_amount(rate)}%.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –∏–ª–∏ 0.5).\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(AdminEditStates.waiting_for_demurrage_rate)
async def process_demurrage_rate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞."""
    try:
        percent = Decimal(message.text)
        if not (0 <= percent <= 100): raise ValueError()
        db.set_setting('demurrage_rate', str(percent / 100))
        await state.clear()
        await message.answer(f"‚úÖ –°—Ç–∞–≤–∫–∞ –¥–µ–º–µ—Ä—Ä–µ–¥–∂–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {format_amount(percent)}%")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100.")

@router.message(Command("set_exchange", ignore_case=True))
async def cmd_set_exchange(message: Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ RUB –∫ ”™."""
    args = message.text.split()
    if len(args) > 1:
        try:
            rate = Decimal(args[1])
            if rate <= 0: raise ValueError()
            db.set_setting('exchange_rate', str(rate))
            await message.answer(f"‚úÖ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1 RUB = {format_amount(rate)} {CURRENCY_SYMBOL}")
        except (InvalidOperation, ValueError):
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    await state.set_state(AdminEditStates.waiting_for_exchange_rate)
    current_rate = Decimal(db.get_setting('exchange_rate', '1.0'))
    await message.answer(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 RUB = {format_amount(current_rate)} {CURRENCY_SYMBOL}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@router.message(AdminEditStates.waiting_for_exchange_rate)
async def process_exchange_rate(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞."""
    try:
        rate = Decimal(message.text)
        if rate <= 0: raise ValueError()
        db.set_setting('exchange_rate', str(rate))
        await state.clear()
        await message.answer(f"‚úÖ –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 1 RUB = {format_amount(rate)} {CURRENCY_SYMBOL}")
    except (InvalidOperation, ValueError):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É.")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ---
# –î–û–ë–ê–í–õ–ï–ù–û: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

@router.message(Command("make_admin", ignore_case=True))
async def cmd_make_admin(message: Message):
    """
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /make_admin @username")
        return

    username = args[1].lstrip('@').lower()
    user = db.get_user(username=username)

    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if user['is_admin']:
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    db.set_admin_status(user['telegram_id'], is_admin=True)
    logger.info(f"Admin {message.from_user.id} promoted {user['telegram_id']} (@{username}) to admin.")
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@router.message(Command("remove_admin", ignore_case=True))
async def cmd_remove_admin(message: Message):
    """
    –°–Ω–∏–º–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    args = message.text.split()
    if len(args) < 2:
        await message.reply("‚ùå –§–æ—Ä–º–∞—Ç: /remove_admin @username")
        return

    username = args[1].lstrip('@').lower()
    user = db.get_user(username=username)

    if not user:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not user['is_admin']:
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if user['telegram_id'] == message.from_user.id:
        await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
        return

    db.set_admin_status(user['telegram_id'], is_admin=False)
    logger.warning(f"Admin {message.from_user.id} demoted {user['telegram_id']} (@{username}) from admin.")
    await message.answer(f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")